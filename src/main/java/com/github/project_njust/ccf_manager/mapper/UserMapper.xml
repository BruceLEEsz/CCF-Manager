<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.github.project_njust.ccf_manager.dao.UserMapper">
  <resultMap id="BaseResultMap" type="com.github.project_njust.ccf_manager.model.User">
    <constructor>
      <idArg column="UID" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="Name" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="Type" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="Data" javaType="java.lang.String" jdbcType="CHAR" />
    </constructor>
  </resultMap>
  <resultMap id="ResultMapWithBLOBs" type="com.github.project_njust.ccf_manager.model.User">
    <constructor>
      <idArg column="UID" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="Name" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="Type" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="Data" javaType="java.lang.String" jdbcType="CHAR" />
      <arg column="Password" javaType="java.lang.String" jdbcType="LONGVARCHAR" />
    </constructor>
  </resultMap>
  <sql id="Base_Column_List">
    UID, Name, Type, Data
  </sql>
  <sql id="Blob_Column_List">
    Password
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from user
    where UID = #{uid,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from user
    where UID = #{uid,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.github.project_njust.ccf_manager.model.User">
    insert into user (UID, Name, Type, 
      Data, Password)
    values (#{uid,jdbcType=INTEGER}, #{name,jdbcType=VARCHAR}, #{type,jdbcType=INTEGER}, 
      #{data,jdbcType=CHAR}, #{password,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.github.project_njust.ccf_manager.model.User">
    insert into user
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="uid != null">
        UID,
      </if>
      <if test="name != null">
        Name,
      </if>
      <if test="type != null">
        Type,
      </if>
      <if test="data != null">
        Data,
      </if>
      <if test="password != null">
        Password,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="uid != null">
        #{uid,jdbcType=INTEGER},
      </if>
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="type != null">
        #{type,jdbcType=INTEGER},
      </if>
      <if test="data != null">
        #{data,jdbcType=CHAR},
      </if>
      <if test="password != null">
        #{password,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.github.project_njust.ccf_manager.model.User">
    update user
    <set>
      <if test="name != null">
        Name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="type != null">
        Type = #{type,jdbcType=INTEGER},
      </if>
      <if test="data != null">
        Data = #{data,jdbcType=CHAR},
      </if>
      <if test="password != null">
        Password = #{password,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where UID = #{uid,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.github.project_njust.ccf_manager.model.User">
    update user
    set Name = #{name,jdbcType=VARCHAR},
      Type = #{type,jdbcType=INTEGER},
      Data = #{data,jdbcType=CHAR},
      Password = #{password,jdbcType=LONGVARCHAR}
    where UID = #{uid,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.github.project_njust.ccf_manager.model.User">
    update user
    set Name = #{name,jdbcType=VARCHAR},
      Type = #{type,jdbcType=INTEGER},
      Data = #{data,jdbcType=CHAR}
    where UID = #{uid,jdbcType=INTEGER}
  </update>
  <resultMap id="BaseResultMap" type="com.github.project_njust.ccf_manager.model.User">
    <constructor>
      <idArg column="UID" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="Name" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="Type" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="Data" javaType="java.lang.String" jdbcType="CHAR" />
    </constructor>
  </resultMap>
  <resultMap id="ResultMapWithBLOBs" type="com.github.project_njust.ccf_manager.model.User">
    <constructor>
      <idArg column="UID" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="Name" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="Type" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="Data" javaType="java.lang.String" jdbcType="CHAR" />
      <arg column="Password" javaType="java.lang.String" jdbcType="LONGVARCHAR" />
    </constructor>
  </resultMap>
  <sql id="Base_Column_List">
    UID, Name, Type, Data
  </sql>
  <sql id="Blob_Column_List">
    Password
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from user
    where UID = #{uid,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from user
    where UID = #{uid,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.github.project_njust.ccf_manager.model.User">
    insert into user (UID, Name, Type, 
      Data, Password)
    values (#{uid,jdbcType=INTEGER}, #{name,jdbcType=VARCHAR}, #{type,jdbcType=INTEGER}, 
      #{data,jdbcType=CHAR}, #{password,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.github.project_njust.ccf_manager.model.User">
    insert into user
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="uid != null">
        UID,
      </if>
      <if test="name != null">
        Name,
      </if>
      <if test="type != null">
        Type,
      </if>
      <if test="data != null">
        Data,
      </if>
      <if test="password != null">
        Password,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="uid != null">
        #{uid,jdbcType=INTEGER},
      </if>
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="type != null">
        #{type,jdbcType=INTEGER},
      </if>
      <if test="data != null">
        #{data,jdbcType=CHAR},
      </if>
      <if test="password != null">
        #{password,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.github.project_njust.ccf_manager.model.User">
    update user
    <set>
      <if test="name != null">
        Name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="type != null">
        Type = #{type,jdbcType=INTEGER},
      </if>
      <if test="data != null">
        Data = #{data,jdbcType=CHAR},
      </if>
      <if test="password != null">
        Password = #{password,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where UID = #{uid,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.github.project_njust.ccf_manager.model.User">
    update user
    set Name = #{name,jdbcType=VARCHAR},
      Type = #{type,jdbcType=INTEGER},
      Data = #{data,jdbcType=CHAR},
      Password = #{password,jdbcType=LONGVARCHAR}
    where UID = #{uid,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.github.project_njust.ccf_manager.model.User">
    update user
    set Name = #{name,jdbcType=VARCHAR},
      Type = #{type,jdbcType=INTEGER},
      Data = #{data,jdbcType=CHAR}
    where UID = #{uid,jdbcType=INTEGER}
  </update>
</mapper>